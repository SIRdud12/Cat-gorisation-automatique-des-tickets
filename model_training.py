import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import classification_report
import joblib
import os

def create_ticket_csv(file_path="tickets_annotes.csv"):
    if not os.path.exists(file_path):
        print("üìÑ Cr√©ation d'un fichier tickets_annotes.csv d'exemple...")
        data = {
            "id": [1, 2, 3, 4, 5],
            "texte": [
                "Erreur de connexion √† la base de donn√©es.",
                "Impossible d‚Äôimprimer le document depuis l‚Äôapplication.",
                "Mot de passe oubli√© pour l‚Äôutilisateur principal.",
                "Demande d‚Äôacc√®s au dossier partag√© du service RH.",
                "Alerte antivirus d√©tect√©e sur le poste de travail."
            ],
            "cat√©gorie": [
                "R√©seau",
                "Support mat√©riel",
                "Support utilisateur",
                "Acc√®s / autorisations",
                "S√©curit√© informatique"
            ]
        }
        df = pd.DataFrame(data)
        df.to_csv(file_path, index=False)
        print(f"‚úÖ Fichier cr√©√© : {file_path}")
    else:
        print(f" Fichier {file_path} d√©j√† existant.")

def train_model(csv_file="tickets_annotes.csv"):
    create_ticket_csv(csv_file)  

    df = pd.read_csv(csv_file)

    if "texte" not in df.columns or "cat√©gorie" not in df.columns:
        raise ValueError("‚ùå Le fichier doit contenir les colonnes 'texte' et 'cat√©gorie'.")

    X = df["texte"]
    y = df["cat√©gorie"]

   
    vectorizer = TfidfVectorizer()
    X_vect = vectorizer.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(X_vect, y, test_size=0.2, random_state=42)

   
    model = LinearSVC()
    model.fit(X_train, y_train)

   
    y_pred = model.predict(X_test)
    print("\n √âvaluation du mod√®le :")
    print(classification_report(y_test, y_pred))

  
    joblib.dump(model, "model_svm.pkl")
    joblib.dump(vectorizer, "vectorizer_tfidf.pkl")
    print("\n‚úÖ Mod√®le et vectoriseur sauvegard√©s.")

if __name__ == "__main__":
    train_model()
